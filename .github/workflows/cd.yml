name: Terragrunt

on:
  push:
    branches:
      - main
      - dev
  pull_request:

jobs:
  # --------------------------------------------------------------------------
  # Terraform for deployment targets
  # Based on tf_env (pull request -> plan; push to branch -> apply)
  # --------------------------------------------------------------------------
  terraform:
    needs: ["setup"]
    strategy:
      fail-fast: false
      matrix:
        os: ["self-hosted"]
        # which deployment target(s) should be applied? e.g., ["services/app"]
        target: ["services/app"]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_ID}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY}}
          aws-region: ${{secrets.AWS_REGION}}

      # - name: Setup Terraform 0.13.5
      #   uses: hashicorp/setup-terraform@v1
      #   with:
      #     terraform_version: 0.13.5
      #     terraform_wrapper: true
      # - name: Setup Terraform version
      #   run: terraform -v
      # - name: Setup Terraform wrapper path
      #   run: which terraform
      - name: Install Terragrunt v0.26.4
        run: |
          sudo wget -q -O /bin/terragrunt "https://github.com/gruntwork-io/terragrunt/releases/download/v0.26.4/terragrunt_linux_amd64"
          sudo chmod +x /bin/terragrunt
          terragrunt -v

      - name: Terragrunt Format
        id: fmt
        run: cd ../terragrunt/terragrunt.hcl/${{secrets.AWS_REGION}}/${{needs.setup.outputs.tf_env}}/${{matrix.target}} && terragrunt validate

      - name: Terragrunt Init
        id: init
        run: cd ../terragrunt/terragrunt.hcl/${{secrets.AWS_REGION}}/${{needs.setup.outputs.tf_env}}/${{matrix.target}} && terragrunt init

      - name: Terragrunt Plan
        id: plan
        if: github.event_name == 'pull_request'
        run: cd ../terragrunt/terragrunt.hcl/${{secrets.AWS_REGION}}/${{needs.setup.outputs.tf_env}}/${{matrix.target}} && terragrunt plan -no-color
        continue-on-error: true

      # - name: Create Comment with Terraform Plan Output
      #   uses: actions/github-script@0.9.0
      #   if: github.event_name == 'pull_request'
      #   env:
      #     PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      #   with:
      #     github-token: ${{ secrets.GITHUB_TOKEN }}
      #     script: |
      #       const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
      #       #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
      #       #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
      #       <details><summary>Show Plan</summary>

      #       \`\`\`${process.env.PLAN}\`\`\`
      #       </details>

      #       *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;
              
      #       github.issues.createComment({
      #         issue_number: context.issue.number,
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         body: output
      #       })

      - name: Terraform Plan Status
        # if: steps.plan.outcome == 'failure'
        run: exit 1

      - name: Terragrunt Apply
        # if: needs.setup.outputs.target_push
        run: cd ../terragrunt/terragrunt.hcl/ terragrunt apply -auto-approve